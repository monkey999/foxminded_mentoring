// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230815221811_seed_transaction")]
    partial class seed_transaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TransactionParticipants");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 16, 1, 18, 11, 550, DateTimeKind.Local).AddTicks(6602));

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a14bb19-3366-4fa6-b001-19cd863e5d46"),
                            Amount = 234234.0,
                            Date = new DateTime(2023, 8, 16, 1, 18, 11, 555, DateTimeKind.Local).AddTicks(6492),
                            ReceiverId = new Guid("f0086e2e-5979-4093-8126-566cfc287053"),
                            SenderId = new Guid("c39a989b-6e36-4bf5-a7f9-c622aefbe542"),
                            TransactionType = "Income"
                        },
                        new
                        {
                            Id = new Guid("c5f3a083-5c71-4947-a18b-2e6bcacdd53b"),
                            Amount = 2342423.0,
                            Date = new DateTime(2023, 8, 16, 1, 18, 11, 555, DateTimeKind.Local).AddTicks(6578),
                            ReceiverId = new Guid("78fa7702-dc9d-44aa-8e64-3dd33f94bf5f"),
                            SenderId = new Guid("feb5376f-cf8c-4409-8c5d-8c94e128e439"),
                            TransactionType = "DebtBorrowing"
                        },
                        new
                        {
                            Id = new Guid("ee054331-1122-4509-a3b8-bf00ea64a03d"),
                            Amount = 54343.0,
                            Date = new DateTime(2023, 8, 16, 1, 18, 11, 555, DateTimeKind.Local).AddTicks(6585),
                            ReceiverId = new Guid("8e6f821c-6e5c-468f-9305-51f4d5242d6e"),
                            SenderId = new Guid("7f308b64-9e48-4682-aaff-6f1ff6d85baa"),
                            TransactionType = "DebtRepayment"
                        },
                        new
                        {
                            Id = new Guid("7fee494f-5be4-470f-b146-0e2ec7af2a80"),
                            Amount = 2342323.0,
                            Date = new DateTime(2023, 8, 16, 1, 18, 11, 555, DateTimeKind.Local).AddTicks(6605),
                            ReceiverId = new Guid("19e588e3-835f-4713-92b4-2ddd2edf162f"),
                            SenderId = new Guid("8a5cf21a-d36c-4e50-b284-51859a896b77"),
                            TransactionType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("992edc44-c733-4adf-b8d0-2dc8227cd718"),
                            Amount = 12545.0,
                            Date = new DateTime(2023, 8, 16, 1, 18, 11, 555, DateTimeKind.Local).AddTicks(6610),
                            ReceiverId = new Guid("9b0609a1-a97e-4b1c-9ffc-1e3e50b42a8c"),
                            SenderId = new Guid("cf582266-c161-492b-833f-e025922d466f"),
                            TransactionType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.CreditAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CreditAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a69b8a7d-7c6f-4344-b318-a3985ab5b6e8"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "CreditAccount1"
                        },
                        new
                        {
                            Id = new Guid("2f83360e-3e1f-4320-9658-90ef74c1e6d8"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "CreditAccount2"
                        },
                        new
                        {
                            Id = new Guid("740bcb1c-caa2-40ca-a9c3-3d78747f6ed6"),
                            Balance = 123131.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "CreditAccount3"
                        },
                        new
                        {
                            Id = new Guid("48f5aff8-8ab2-4a50-a8aa-09a3dd51e30d"),
                            Balance = 432423432.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "CreditAccount4"
                        },
                        new
                        {
                            Id = new Guid("0b69154d-c3f8-43dc-814b-735cfdb217ee"),
                            Balance = 321532452.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "CreditAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DebitAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7aa90dec-211a-4116-84a4-0d42b1d5458b"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "DebitAccount1"
                        },
                        new
                        {
                            Id = new Guid("5990d12f-a1d2-41b2-8eb2-d1dd8efb9fd2"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "DebitAccount2"
                        },
                        new
                        {
                            Id = new Guid("083a3f91-7128-49cb-90bd-c74e54634778"),
                            Balance = 432423.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "DebitAccount3"
                        },
                        new
                        {
                            Id = new Guid("6ad8efd9-1633-4133-a782-ca5d81a3532b"),
                            Balance = 12321.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "DebitAccount4"
                        },
                        new
                        {
                            Id = new Guid("a0f103ac-5383-44c8-acf7-dd6e753aa6c8"),
                            Balance = 123143.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "DebitAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.InvestAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("InvestAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("058eabfc-acd6-488c-aeff-b71e977cb963"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "InvestAccount1"
                        },
                        new
                        {
                            Id = new Guid("c65677e5-18d2-4468-b129-ded425f6b22e"),
                            Balance = 31231.0,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "InvestAccount2"
                        },
                        new
                        {
                            Id = new Guid("3a95dff6-8454-41f6-a743-72bdbfe53a73"),
                            Balance = 12312.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "InvestAccount3"
                        },
                        new
                        {
                            Id = new Guid("62895748-7eea-4e5d-a2db-566f5f5845af"),
                            Balance = 242342.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "InvestAccount4"
                        },
                        new
                        {
                            Id = new Guid("742dcedd-0b72-4215-9871-5f50c9292812"),
                            Balance = 12542342.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "InvestAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa4db7e4-3a4b-4e3d-b311-d0ebf6628c5c"),
                            CategoryName = "Stocks",
                            CategoryType = "Asset"
                        },
                        new
                        {
                            Id = new Guid("6d175ec7-87a2-4c3e-a870-bc3f2481d6d5"),
                            CategoryName = "Food",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("b8f73c60-7286-4ba2-9b77-dec1b8c1e680"),
                            CategoryName = "Salary",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("2436690b-9144-4159-80b8-510efe615885"),
                            CategoryName = "Bank loan",
                            CategoryType = "Debt"
                        },
                        new
                        {
                            Id = new Guid("942aef6c-e78e-4656-be07-3df08ff385c9"),
                            CategoryName = "Crypto",
                            CategoryType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "To")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "From")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Models.Accounts.CreditAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.CreditAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.DebitAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.InvestAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.InvestAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
