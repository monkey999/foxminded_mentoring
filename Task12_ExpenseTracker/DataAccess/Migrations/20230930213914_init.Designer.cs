// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230930213914_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TransactionParticipants", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 1, 0, 39, 14, 135, DateTimeKind.Local).AddTicks(9066));

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.AccountBase", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AccountBases", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af9e4fa6-3ed8-4561-b4cf-09331dd6836e"),
                            CategoryName = "Coca plantation",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("6b17ecda-b009-44a0-ad7f-447ba6bae96a"),
                            CategoryName = "Soderzhanka",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("0918725e-8c0b-4450-b8f0-1709ee3ec09e"),
                            CategoryName = "Weapons",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("ba715918-38f9-40de-ad5f-a7316f67d767"),
                            CategoryName = "Cocaine",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("bd8e87d4-3a77-4e08-a70f-629cd6285484"),
                            CategoryName = "Trading slaves",
                            CategoryType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.AccountBase");

                    b.Property<double>("CurrentCreditLimit")
                        .HasColumnType("float");

                    b.Property<double>("StartCreditLimit")
                        .HasColumnType("float");

                    b.ToTable("DebitAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55883208-4516-4a34-bc9e-0d22d87b4d03"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "DebitAccount1",
                            CurrentCreditLimit = 0.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("7aeb1347-ca78-441d-8364-03c7c9198946"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "DebitAccount2",
                            CurrentCreditLimit = 500.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("fcf00ad5-c47d-4562-882c-8af6bb2d13ec"),
                            Balance = 432423.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "DebitAccount3",
                            CurrentCreditLimit = 1000.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("f6b0ea9e-eabc-4d9b-8f27-fc97abe9b434"),
                            Balance = 12321.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "DebitAccount4",
                            CurrentCreditLimit = 200.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("0647b65f-9c75-40f9-9606-d44ffd6dd5e1"),
                            Balance = 123143.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "DebitAccount5",
                            CurrentCreditLimit = 300.0,
                            StartCreditLimit = 1000.0
                        });
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "To")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "From")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.AccountBase", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.BaseEntities.AccountBase", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.AccountBase", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.DebitAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
