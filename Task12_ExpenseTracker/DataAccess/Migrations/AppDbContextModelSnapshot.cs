// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TransactionParticipants");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 16, 19, 58, 12, 454, DateTimeKind.Local).AddTicks(1560));

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b62006c-a7c9-4fc1-94c6-9a61aaa3ad88"),
                            Amount = 234234.0,
                            Date = new DateTime(2023, 8, 16, 19, 58, 12, 460, DateTimeKind.Local).AddTicks(3831),
                            ReceiverId = new Guid("acad0500-3135-4be9-b3ce-00136ea28504"),
                            SenderId = new Guid("9223c590-2add-425a-8b75-d5ab6a9f9893"),
                            TransactionType = "Income"
                        },
                        new
                        {
                            Id = new Guid("18634549-c6b9-4c47-98b9-0862f8ae16bf"),
                            Amount = 2342423.0,
                            Date = new DateTime(2023, 8, 16, 19, 58, 12, 460, DateTimeKind.Local).AddTicks(3922),
                            ReceiverId = new Guid("41c236e0-107f-4dd5-b89f-cc953c6d2c4e"),
                            SenderId = new Guid("a949ac65-2d34-4e9c-8eb9-9913f282e76c"),
                            TransactionType = "IGiveLoan"
                        },
                        new
                        {
                            Id = new Guid("b3d19982-c77d-4afd-a129-e5373e9f5b21"),
                            Amount = 54343.0,
                            Date = new DateTime(2023, 8, 16, 19, 58, 12, 460, DateTimeKind.Local).AddTicks(3929),
                            ReceiverId = new Guid("a1e801f0-40e0-4c3f-bbde-00a4aa264772"),
                            SenderId = new Guid("c1ce9b8f-0de1-4823-81d7-7a63185da4dd"),
                            TransactionType = "RepaysMeLoan"
                        },
                        new
                        {
                            Id = new Guid("7281c33f-41fa-4e2f-adc2-8e9ebfb061f5"),
                            Amount = 2342323.0,
                            Date = new DateTime(2023, 8, 16, 19, 58, 12, 460, DateTimeKind.Local).AddTicks(3991),
                            ReceiverId = new Guid("c8a648f7-0f77-48c0-800f-9716d60bde02"),
                            SenderId = new Guid("6ad7ebcc-69a5-4132-aec5-a80389062508"),
                            TransactionType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("bd48bff0-3f5e-473c-ab25-b21ae0b6546c"),
                            Amount = 12545.0,
                            Date = new DateTime(2023, 8, 16, 19, 58, 12, 460, DateTimeKind.Local).AddTicks(3997),
                            ReceiverId = new Guid("725638a2-4b0d-4dfd-b810-143c9f6a3c1c"),
                            SenderId = new Guid("cb45c2e3-3d19-475f-a7a7-bedaaaff1a6d"),
                            TransactionType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.CreditAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CreditAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c50561c-7a7a-4cd8-85cd-34e824ba45a5"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "CreditAccount1"
                        },
                        new
                        {
                            Id = new Guid("20bf392e-34f3-4830-9585-0ac8aa4f10ef"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "CreditAccount2"
                        },
                        new
                        {
                            Id = new Guid("bf0acc84-73c6-4d36-9121-54ecc7fe3190"),
                            Balance = 123131.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "CreditAccount3"
                        },
                        new
                        {
                            Id = new Guid("29137c6f-d907-4b9b-83b1-723d6d6cba6c"),
                            Balance = 432423432.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "CreditAccount4"
                        },
                        new
                        {
                            Id = new Guid("684b1c00-3637-418f-bdae-fcf68d01be9c"),
                            Balance = 321532452.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "CreditAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DebitAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("efecfbca-3e80-4b5a-920b-ae2d91a3578b"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "DebitAccount1"
                        },
                        new
                        {
                            Id = new Guid("20c8d451-72f4-4718-9517-563bc41b65ea"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "DebitAccount2"
                        },
                        new
                        {
                            Id = new Guid("7117684e-890e-4806-96df-d335046ae0d3"),
                            Balance = 432423.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "DebitAccount3"
                        },
                        new
                        {
                            Id = new Guid("a1d97e61-3873-4ae7-86e7-de301c002e48"),
                            Balance = 12321.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "DebitAccount4"
                        },
                        new
                        {
                            Id = new Guid("596b724e-84cc-4498-806a-655e87f1f838"),
                            Balance = 123143.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "DebitAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebtAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebtAccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DebtAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f450166d-92ed-4d17-8906-226480d7abb8"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            DebtAccountType = "IDebtGiver",
                            Description = "weewfwef",
                            Name = "DebtAccount1"
                        },
                        new
                        {
                            Id = new Guid("ae2cdd68-9886-4aaf-8c58-18d6a92c8575"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            DebtAccountType = "IDebtTaker",
                            Description = "cwwwecwcew",
                            Name = "DebtAccount2"
                        },
                        new
                        {
                            Id = new Guid("56a2d3c8-1698-41bf-8638-17c26fac6132"),
                            Balance = 432423.0,
                            CurrencyType = "PLZ",
                            DebtAccountType = "IDebtGiver",
                            Description = "cwewecds",
                            Name = "DebtAccount3"
                        },
                        new
                        {
                            Id = new Guid("93819667-c3cc-4b5e-84fd-a07713b755c3"),
                            Balance = 12321.0,
                            CurrencyType = "GBP",
                            DebtAccountType = "IDebtGiver",
                            Description = "evevrve",
                            Name = "DebtAccount4"
                        },
                        new
                        {
                            Id = new Guid("cefed0d7-72fb-4ca5-8a3c-08ec3eda1099"),
                            Balance = 123143.0,
                            CurrencyType = "CAD",
                            DebtAccountType = "IDebtGiver",
                            Description = "cwewwfre",
                            Name = "DebtAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.InvestAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("InvestAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43688a64-8620-4c81-ab12-4418d35ddb87"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "InvestAccount1"
                        },
                        new
                        {
                            Id = new Guid("69ef6585-ccb0-4afc-8284-257f12b94729"),
                            Balance = 31231.0,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "InvestAccount2"
                        },
                        new
                        {
                            Id = new Guid("5d233358-bf5c-492f-b8c7-06b6f1111125"),
                            Balance = 12312.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "InvestAccount3"
                        },
                        new
                        {
                            Id = new Guid("d313e7c2-5f3b-4a28-be53-b1f3d7283051"),
                            Balance = 242342.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "InvestAccount4"
                        },
                        new
                        {
                            Id = new Guid("84769db7-61f7-4287-8f56-b176ac99c339"),
                            Balance = 12542342.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "InvestAccount5"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f39df7f9-19d0-4c69-a44e-8bd2dddd0c9d"),
                            CategoryName = "Stocks",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("9ccd1bc6-e225-481b-8508-521cf8d50446"),
                            CategoryName = "Food",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("e91367db-2be5-4566-870a-3a5c699bacc4"),
                            CategoryName = "Salary",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("4879229a-411b-446b-9c6e-62d9923c1ec9"),
                            CategoryName = "Bank loan",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("86c0d76d-69a7-4ac5-b9a6-b78f6455db63"),
                            CategoryName = "Crypto",
                            CategoryType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "To")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "From")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Models.Accounts.CreditAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.CreditAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.DebitAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebtAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.DebtAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.InvestAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.InvestAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
