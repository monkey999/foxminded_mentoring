// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231012013232_somechanges")]
    partial class somechanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TransactionParticipants", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 12, 4, 32, 31, 784, DateTimeKind.Local).AddTicks(9261));

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.AccountBase", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AccountBases", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.TransactionParticipant");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88f63fcb-78eb-4b3d-986e-80b4d4e42992"),
                            CategoryName = "Coca plantation",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("d9de8074-b3a5-444a-8aef-8893ea9985ef"),
                            CategoryName = "Soderzhanka",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("df333852-f567-4925-88e9-eab0c4b90abf"),
                            CategoryName = "Weapons",
                            CategoryType = "Income"
                        },
                        new
                        {
                            Id = new Guid("f00571a8-0a6f-4d8b-a199-82880a717c93"),
                            CategoryName = "Cocaine",
                            CategoryType = "Expense"
                        },
                        new
                        {
                            Id = new Guid("e3c1647d-e2fd-4734-abd7-7187e4ea5b05"),
                            CategoryName = "Trading slaves",
                            CategoryType = "Income"
                        });
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasBaseType("Domain.Models.BaseEntities.AccountBase");

                    b.Property<double>("CurrentCreditLimit")
                        .HasColumnType("float");

                    b.Property<double>("StartCreditLimit")
                        .HasColumnType("float");

                    b.ToTable("DebitAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d6b9c7d-27d2-4a9d-9b5f-2b108b50f9b4"),
                            Balance = 102.0,
                            CurrencyType = "USD",
                            Description = "weewfwef",
                            Name = "DebitAccount1",
                            CurrentCreditLimit = 0.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("2335c691-79e6-4bf3-8695-db9bb56642bc"),
                            Balance = 100023.2,
                            CurrencyType = "CHF",
                            Description = "cwwwecwcew",
                            Name = "DebitAccount2",
                            CurrentCreditLimit = 500.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("e00a1a79-0d02-4d37-9fa5-f54d21521e56"),
                            Balance = 432423.0,
                            CurrencyType = "PLZ",
                            Description = "cwewecds",
                            Name = "DebitAccount3",
                            CurrentCreditLimit = 1000.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("920caa25-e0a9-4081-9462-9a3a9e1e1a7f"),
                            Balance = 12321.0,
                            CurrencyType = "GBP",
                            Description = "evevrve",
                            Name = "DebitAccount4",
                            CurrentCreditLimit = 200.0,
                            StartCreditLimit = 1000.0
                        },
                        new
                        {
                            Id = new Guid("04ce37fb-51b5-4af2-9093-ca925cd45ac3"),
                            Balance = 123143.0,
                            CurrencyType = "CAD",
                            Description = "cwewwfre",
                            Name = "DebitAccount5",
                            CurrentCreditLimit = 300.0,
                            StartCreditLimit = 1000.0
                        });
                });

            modelBuilder.Entity("Domain.Models.Transaction", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "To")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", "From")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.AccountBase", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.BaseEntities.AccountBase", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.TransactionParticipant", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Accounts.DebitAccount", b =>
                {
                    b.HasOne("Domain.Models.BaseEntities.AccountBase", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Accounts.DebitAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.BaseEntities.TransactionParticipant", b =>
                {
                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
